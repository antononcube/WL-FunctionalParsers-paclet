(* ::Package:: *)

PacletObject[
  <|
    "Name" -> "AntonAntonov/FunctionalParsers",
    "Description" -> "Functional parsers",
    "Creator" -> "Anton Antonov",
    "License" -> "MIT",
    "PublisherID" -> "AntonAntonov",
    "Version" -> "1.0.0",
    "WolframVersion" -> "12.0+",
    "Extensions" -> {
      {
        "Kernel",
        "Root" -> "Kernel",
        "Context" -> {"AntonAntonov`FunctionalParsers`"},
        "Symbols" -> {
          "AntonAntonov`FunctionalParsers`AddParserModifier",
          "AntonAntonov`FunctionalParsers`EBNF",
          "AntonAntonov`FunctionalParsers`EBNFAlternatives",
          "AntonAntonov`FunctionalParsers`EBNFAlternativesInterpreter",
          "AntonAntonov`FunctionalParsers`EBNFContextRules",
          "AntonAntonov`FunctionalParsers`EBNFNonTerminal",
          "AntonAntonov`FunctionalParsers`EBNFNonTerminalInterpreter",
          "AntonAntonov`FunctionalParsers`EBNFOption",
          "AntonAntonov`FunctionalParsers`EBNFOptionInterpreter",
          "AntonAntonov`FunctionalParsers`EBNFRepetition",
          "AntonAntonov`FunctionalParsers`EBNFRepetitionInterpreter",
          "AntonAntonov`FunctionalParsers`EBNFRule",
          "AntonAntonov`FunctionalParsers`EBNFRuleInterpreter",
          "AntonAntonov`FunctionalParsers`EBNFSequence",
          "AntonAntonov`FunctionalParsers`EBNFSequenceInterpreter",
          "AntonAntonov`FunctionalParsers`EBNFTerminal",
          "AntonAntonov`FunctionalParsers`EBNFTerminalInterpreter",
          "AntonAntonov`FunctionalParsers`GenerateParsersFromEBNF",
          "AntonAntonov`FunctionalParsers`GrammarNormalize",
          "AntonAntonov`FunctionalParsers`GrammarRandomSentences",
          "AntonAntonov`FunctionalParsers`InterpretWithContext",
          "AntonAntonov`FunctionalParsers`ParseAlternativeComposition",
          "AntonAntonov`FunctionalParsers`ParseApply",
          "AntonAntonov`FunctionalParsers`ParseBracketed",
          "AntonAntonov`FunctionalParsers`ParseChain1Left",
          "AntonAntonov`FunctionalParsers`ParseChainLeft",
          "AntonAntonov`FunctionalParsers`ParseChainRight",
          "AntonAntonov`FunctionalParsers`ParseChoice",
          "AntonAntonov`FunctionalParsers`ParseComposeWithResults",
          "AntonAntonov`FunctionalParsers`ParseCurlyBracketed",
          "AntonAntonov`FunctionalParsers`ParseEBNF",
          "AntonAntonov`FunctionalParsers`ParseEpsilon",
          "AntonAntonov`FunctionalParsers`ParseFail",
          "AntonAntonov`FunctionalParsers`ParseJust",
          "AntonAntonov`FunctionalParsers`ParseListOf",
          "AntonAntonov`FunctionalParsers`ParseMany",
          "AntonAntonov`FunctionalParsers`ParseMany1",
          "AntonAntonov`FunctionalParsers`ParseManyByBranching",
          "AntonAntonov`FunctionalParsers`ParseModify",
          "AntonAntonov`FunctionalParsers`ParseOption",
          "AntonAntonov`FunctionalParsers`ParseOption1",
          "AntonAntonov`FunctionalParsers`ParsePack",
          "AntonAntonov`FunctionalParsers`ParseParenthesized",
          "AntonAntonov`FunctionalParsers`ParsePredicate",
          "AntonAntonov`FunctionalParsers`ParseRecursiveDefinition",
          "AntonAntonov`FunctionalParsers`ParseSequentialComposition",
          "AntonAntonov`FunctionalParsers`ParseSequentialCompositionPickLeft",
          "AntonAntonov`FunctionalParsers`ParseSequentialCompositionPickRight",
          "AntonAntonov`FunctionalParsers`ParseShortest",
          "AntonAntonov`FunctionalParsers`ParseSome",
          "AntonAntonov`FunctionalParsers`ParseSpaces",
          "AntonAntonov`FunctionalParsers`ParseSucceed",
          "AntonAntonov`FunctionalParsers`ParseSymbol",
          "AntonAntonov`FunctionalParsers`ParseToEBNFTokens",
          "AntonAntonov`FunctionalParsers`ParseToken",
          "AntonAntonov`FunctionalParsers`ParseToTokens",
          "AntonAntonov`FunctionalParsers`ParsingTestTable",
          "AntonAntonov`FunctionalParsers`SetParserModifier",
          "AntonAntonov`FunctionalParsers`ToTokens"
        }
      },
      {
        "Documentation",
        "Root" -> "Documentation",
        "Language" -> "English"
      }
    }
  |>
]
